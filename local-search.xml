<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>做题节选</title>
    <link href="/2023/11/25/fds%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E5%81%9A%E9%A2%98%E9%80%89/"/>
    <url>/2023/11/25/fds%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0%E5%81%9A%E9%A2%98%E9%80%89/</url>
    
    <content type="html"><![CDATA[<h2 id="15-16年"><a href="#15-16年" class="headerlink" title="15-16年"></a>15-16年</h2><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><ul><li><p>The best “worst-case time complexity” for any algorithm that sorts by comparisons only must be O(NlogN).</p><blockquote><p>T<br>就是熟知的 $NlogN$ 结论,<br>为什么不是冒泡排序的$N^2$呢, 因为这个不满足 best</p></blockquote></li><li><p>$N(logN)^2$ &nbsp; is &nbsp; $O(N^2).$</p><blockquote><p>T<br>基础概念要牢固:Ο（大写）；表示上界(tightness unknown)，小于等于的意思<br><a href="https://blog.csdn.net/liyuming0000/article/details/46929493">参考文章</a><br>$\Theta$ 才是严格的情况</p></blockquote></li><li><p>If the most commonly used operations are to visit a random position and to insert and delete the last element in a linear list, then sequential storage works the fastest.</p><blockquote><p>T<br>你只是忘记了线性存储是什么东西<br><a href="https://blog.csdn.net/weixin_71020872/article/details/128591598">参考文章</a><br>其底层原理通过<strong>数组</strong>来实现。数组中的元素是有序的，通过下标访问。对于需要频繁访问使用的元素，使用顺序表的效率非常之高。<br>优点：</p><ul><li>顺序表有序，访问顺序表中的数据很快。</li></ul><p>缺点：</p><ul><li>由于底层由数组实现，每当分配的空间用完后都需要扩容，而对于未使用的空间，也是一种浪费。</li><li>进行插入和删除操作的效率很低，因为可能需要挪动大量的元素。<blockquote></blockquote>但是本题插入和删除的是最后的元素!</li></ul></blockquote></li><li><blockquote><p>T</p></blockquote></li><li><blockquote><p>T</p></blockquote></li></ul><h2 id="选择-填空"><a href="#选择-填空" class="headerlink" title="选择(填空)"></a>选择(填空)</h2><ul><li><p>Given a tree of degree 4.Suppose that the numbers of nodes of degrees 2, 3 and 4 are 4, 2 and 1, respectively. Then the number of leaf nodes must be:</p><blockquote><p>最多四个子节点<br>强行作图就可以(<em>感觉没什么其他方法?</em>), 但是要细心, 我的答案:12</p></blockquote></li><li><p>知识:front 指向队列的第一个元素，而 rear 指向队列最后一个元素的下一个位置. 竟然是rear不放元素!</p></li><li><p>知识: a complete binary tree : 若设二叉树的深度为h，除第 h 层外，其它各层 (1~h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边</p></li><li><p>union的<a href="https://blog.csdn.net/weixin_44503157/article/details/118324858">参考文章</a></p></li><li><p>Union by size(当前根节点所在树的节点个数): 小size并入大size</p></li><li><p>Union by rank: 把高度小的集合树 指向 高度大的集合树</p></li></ul></br>- Suppose that the level-order traversal sequence of a min-heap is {1, 3, 2, 5, 4, 7, 6}. Use the linear algorithm to adjust this min-heap into a max-heap. The inorder traversal sequence of the resulting tree is:  <blockquote><p>linear algorithm:<br>把一个堆变成最大堆(Java), <strong>大循环小递归</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">maxHeapify</span><span class="hljs-params">(<span class="hljs-type">int</span> [] A, <span class="hljs-type">int</span> heapSize, <span class="hljs-type">int</span> i)</span><br>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>*i;<br><span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>*i + <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">larger</span> <span class="hljs-operator">=</span> i;<br>    <span class="hljs-comment">// (有左子节点)左子节点大于当前节点</span><br><span class="hljs-keyword">if</span> (left &lt;= heapSize &amp;&amp; A[left] &gt; A[larger])<br>&#123;<br>larger = left;<br>&#125;<br>    <span class="hljs-comment">// (有右子节点)右子节点大于当前节点</span><br><span class="hljs-keyword">if</span> (right &lt;= heapSize &amp;&amp; A[right] &gt; A[larger])<br>&#123;<br>larger = right;<br>&#125;<br>    <span class="hljs-comment">// 交换函数</span><br><span class="hljs-keyword">if</span> (larger != i)<br>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> A[i];<br>A[i] = A[larger];<br>A[larger] = temp;<br>        <span class="hljs-comment">// 检查交换后是否依然满足最大堆</span><br>maxHeapify(A, heapSize, larger); <br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 从倒数第二层的最左边开始, 依次往前遍历</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">BuildHeap</span><span class="hljs-params">(<span class="hljs-type">int</span> [] A, <span class="hljs-type">int</span> heapSize)</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> heapSize/<span class="hljs-number">2</span>-<span class="hljs-number">1</span>; i&gt; = <span class="hljs-number">0</span>; i++)<br>&#123;<br>maxHeapify(A, heapSize, i);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></br><ul><li>If on the 9th level of a complete binary tree (assume that the root is on the 1st level) there are 100 leaf nodes, then the maximum number of nodes of this tree must be:</li></ul><blockquote><p>823<br>读题失误: 第九层有100个叶节点的意思是, 还有第十层, (256-100)*2 + 511 &#x3D; 823</p></blockquote><ul><li>The array representation of a disjoint set containing numbers 0 to 8 is given by { 1, -4, 1, 1, -3, 4, 4, 8, -2 }. Then to union the two sets which contain 6 and 8 (with union-by-size), the index of the resulting root and the value stored at the root are:<blockquote></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>fds</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复习</tag>
      
      <tag>做题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快去学CSS</title>
    <link href="/2023/11/22/%E5%BF%AB%E5%8E%BB%E5%AD%A6CSS/"/>
    <url>/2023/11/22/%E5%BF%AB%E5%8E%BB%E5%AD%A6CSS/</url>
    
    <content type="html"><![CDATA[<p>Welcome to CSS !</p><p><del>为了完成数据可视化导论的作业罢了</del><br>这是<a href="https://vis-course.projects.zjuidg.org/schedule_infovis">课程网址</a>, 有梯子时打不开</p>]]></content>
    
    
    <categories>
      
      <category>新技能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回溯整个网页制作的流程</title>
    <link href="/2023/11/22/myFluid/"/>
    <url>/2023/11/22/myFluid/</url>
    
    <content type="html"><![CDATA[<p>Welcome to the new world!</p><h1 id="整个流程"><a href="#整个流程" class="headerlink" title="整个流程"></a>整个流程</h1><p>主要还是参考<a href="https://blog.csdn.net/qq_58608526/article/details/124652412">这篇文章</a><br>其他有用的文章还包括 <a href="https://blog.csdn.net/wapchief/article/details/54602515">解决插图的疑惑</a><br>这个是关于 <a href="https://hexo.fluid-dev.com/docs/start/">fluid主题</a> 的官方文档</p><p><small><em>这是链接格式</em> <code>[链接显示名]([链接地址] &quot;链接标题&quot;)</code> <em>但我这里用的格式是</em> <code>[链接显示名](链接地址)</code> </small></p><p><del>&#x2F;&#x2F;TODO</del></p><h3 id="1-下载git-bash"><a href="#1-下载git-bash" class="headerlink" title="1.下载git bash"></a>1.下载git bash</h3><h3 id="2-下载nodejs"><a href="#2-下载nodejs" class="headerlink" title="2.下载nodejs"></a>2.下载nodejs</h3><h3 id="3-下载npm"><a href="#3-下载npm" class="headerlink" title="3.下载npm"></a>3.下载npm</h3><p>去git bash输入<code>node -v</code>和<code>npm -v</code>检查是否下载成功</p><h3 id="4-github新建仓库"><a href="#4-github新建仓库" class="headerlink" title="4.github新建仓库"></a>4.github新建仓库</h3><h3 id="5-生成密钥-产生链接"><a href="#5-生成密钥-产生链接" class="headerlink" title="5.生成密钥, 产生链接"></a>5.生成密钥, 产生链接</h3><p>密钥在 <code>C:\Users\15473\.ssh</code></p><h3 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h3><h2 id="关于图片"><a href="#关于图片" class="headerlink" title="关于图片"></a>关于图片</h2><p><mark>鉴于这个markdown迟早要变成html,还是建议多用html语法!</mark></p><!--可选项有: `{width=300px}`控制大小&nbsp; -> &nbsp;`![插图1](/img/picture1.png){width=300px}`![插图1](/img/picture1.png){width=300px}--><p>注意插图的格式为 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">/img/picture1.png</span> <span class="hljs-attr">width</span>=<span class="hljs-string">30%/</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><div><img src=/img/picture1.png width=30%/></div><p>但是如果要控制位置和大小, 目前探索出来的写法只有html语法, 而且目前还不支持链接添加图片(只能在.md上面显示), 都是本地的图片, 在.md能控制大小但是在网页依然无法控制…(<del>怪, 很奇怪…</del>)<br><br><br></p><p><font face="楷体" color="blue" size=5>控制位置</font></p><div style="width: 100%;height:4px;position: relative;background-color: #a79d91;margin: 2% 0 2% 0;text-align:center;">     <span style="display:inline-block;background-color: #FFF;padding: 0 20px;color: #303133;transform: translateY(-50%);font-size: 23px;"> 右边 </span></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">right</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/img/cat.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">70%/</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><div align=right><img src="/img/cat.png" width=70%/></div><br><div style="width: 100%;height:4px;position: relative;background-color: #a79d91;margin: 2% 0 2% 0;text-align:center;">     <span style="display:inline-block;background-color: #FFF;padding: 0 20px;color: #303133;transform: translateY(-50%);font-size: 23px;"> 中间 </span></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/img/picture1.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">30%</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br><br></code></pre></td></tr></table></figure><div align=center> <img src="/img/picture1.png" width=30%> </div> <br><div style="width: 100%;height:4px;position: relative;background-color: #a79d91;margin: 2% 0 2% 0;text-align:center;">     <span style="display:inline-block;background-color: #FFF;padding: 0 20px;color: #303133;transform: translateY(-50%);font-size: 23px;">并排 </span></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/img/picture1.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">30%</span>&gt;</span> <span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/img/picture1.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">30%</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><div align=center> <img src="/img/picture1.png" width=30%> &nbsp;<img src="/img/picture1.png" width=30%></div><p><br><br></p><h3 id="出现过的问题"><a href="#出现过的问题" class="headerlink" title="出现过的问题"></a>出现过的问题</h3><ul><li>插入图片<ul><li>根据教程的相对路径, 本来把图片放到_posts里面, 也就是和.md都放到了一起, 是没办法打开的.</li><li><strong>在source文件夹下新建 img文件夹, 再把图片放进去, 就可以了</strong></li><li>初步判定为: theme-fluid的img文件夹和MyBlog的文件夹合并的时候, 本来我的MyBlog&#x2F;source文件夹没有img文件夹, 就一直默认使用fluid的img文件夹, 所以就找不到我自己设置的图片</li></ul></li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><blockquote><p><code>hexo clean &amp;&amp; hexo g hexo s</code><br>&nbsp;都在本地</p></blockquote><blockquote><p><code>hexo d</code><br>&nbsp;部署到.io上</p></blockquote><blockquote><p><code>hexo new blog</code><br>&nbsp;创建新的文章 </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>新技能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fluid</tag>
      
      <tag>复刻</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置过程回溯</title>
    <link href="/2023/11/22/%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B%E5%9B%9E%E6%BA%AF/"/>
    <url>/2023/11/22/%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B%E5%9B%9E%E6%BA%AF/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>My first Blog</title>
    <link href="/2023/11/21/My-first-Blog/"/>
    <url>/2023/11/21/My-first-Blog/</url>
    
    <content type="html"><![CDATA[<p>My <strong>first</strong> try.<br>Do something interesting…</p> <img src="https://th.bing.com/th/id/R.a733cf575f7a620e3d1d0a2ff359ffed?rik=Nk3j58605Qs10Q&riu=http%3a%2f%2fpic30.nipic.com%2f20130607%2f11831280_133504338151_2.jpg&ehk=Z21JqowF0DieMic26CyFCwMatLG2iwkR6SzeSbZGdsM%3d&risl=&pid=ImgRaw&r=0" width="300"/>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/21/hello-world/"/>
    <url>/2023/11/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
